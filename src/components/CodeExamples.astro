---
import CodeBlockStatic from './CodeBlockStatic.astro';
import { IconDisplay } from './IconDisplay.tsx';

// Example: The Right Way with Effect-TS
const effectExample = `import { Effect, pipe } from 'effect'

// Define your data fetching as pure functions
const fetchUser = (id: string): Effect.Effect<User, ApiError> =>
  Effect.tryPromise({
    try: () => api.getUser(id),
    catch: (error) => new ApiError(\`Failed to fetch user: \${error}\`)
  })

// Compose operations elegantly
const getUserWithRetry = (id: string) =>
  pipe(
    fetchUser(id),
    Effect.retry({
      times: 3,
      schedule: Schedule.exponential('100 millis')
    }),
    Effect.timeout('5 seconds'),
    Effect.tap(user => 
      Console.log(\`Fetched user: \${user.name}\`)
    )
  )

// Run it - clean and simple
const user = await Effect.runPromise(getUserWithRetry('123'))`;

// Example: Common useEffect Patterns to Avoid
const badPatterns = `// ❌ DON'T: Update state based on props
useEffect(() => {
  setFullName(\`\${firstName} \${lastName}\`);
}, [firstName, lastName]);

// ✅ DO: Calculate during render
const fullName = \`\${firstName} \${lastName}\`;

// ❌ DON'T: Fetch on mount
useEffect(() => {
  fetch('/api/data').then(setData);
}, []);

// ✅ DO: Use a data fetching library
const { data } = useQuery(['data'], fetchData);`;

// Example: When you actually need useEffect
const legitimateUseEffect = `// ✅ LEGITIMATE: Synchronizing with external system
useEffect(() => {
  // Connect to WebSocket
  const ws = new WebSocket('wss://api.example.com');
  
  ws.onmessage = (event) => {
    updateMessages(event.data);
  };
  
  // Proper cleanup is MANDATORY
  return () => {
    ws.close();
  };
}, [roomId]); // Dependencies are correct

// Even better: Use Effect-TS for this too!
const websocketEffect = pipe(
  Effect.acquireRelease(
    Effect.sync(() => new WebSocket(url)),
    (ws) => Effect.sync(() => ws.close())
  ),
  Effect.flatMap(ws => 
    Stream.fromEventListener(ws, 'message')
  )
)`;
---

<section class="py-20 px-4 bg-gradient-to-b from-black via-gray-900/10 to-black">
  <div class="max-w-6xl mx-auto">
    <h2 class="text-5xl sm:text-6xl font-black text-center mb-4">
      <span class="text-green-400">CODE THAT WORKS</span>
    </h2>
    <p class="text-xl text-gray-400 text-center mb-12">
      Learn the patterns that save production environments
    </p>

    <div class="space-y-12">
      <!-- The Right Way -->
      <div>
        <div class="flex items-center gap-3 mb-6">
          <IconDisplay icon="zap" className="text-green-400" size={32} client:visible />
          <h3 class="text-3xl font-bold text-green-400">
            The Enlightened Path: Effect-TS
          </h3>
        </div>
        <CodeBlockStatic 
          code={effectExample}
          lang="typescript"
          title="The way of the wise"
          variant="success"
          showLineNumbers={true}
        />
      </div>

      <!-- Common Mistakes -->
      <div>
        <div class="flex items-center gap-3 mb-6">
          <IconDisplay icon="x" className="text-warning-red" size={32} client:visible />
          <h3 class="text-3xl font-bold text-warning-red">
            Common Patterns to Avoid
          </h3>
        </div>
        <CodeBlockStatic 
          code={badPatterns}
          lang="typescript"
          title="Learn from others' mistakes"
          variant="error"
        />
      </div>

    
    </div>

    <!-- Key Takeaway -->
    <div class="mt-16 p-8 bg-gradient-to-r from-green-400/10 to-electric-blue/10 rounded-lg border border-gray-700">
      <div class="flex items-center gap-3 mb-4">
        <IconDisplay icon="alertCircle" className="text-white" size={28} client:visible />
        <h3 class="text-2xl font-bold text-white">
          Key Takeaway
        </h3>
      </div>
      <p class="text-lg text-gray-300 mb-4">
        <strong>95% of useEffect usage is unnecessary.</strong> Before reaching for useEffect, ask yourself:
      </p>
      <ol class="list-decimal list-inside space-y-2 text-gray-400">
        <li>Can this be calculated during render?</li>
        <li>Can this be an event handler?</li>
        <li>Can a library handle this better?</li>
        <li>Can Effect-TS make this cleaner?</li>
      </ol>
      <p class="text-lg text-green-400 mt-4 font-bold">
        If you answered "yes" to any of these, you don't need useEffect.
      </p>
    </div>
  </div>
</section>
